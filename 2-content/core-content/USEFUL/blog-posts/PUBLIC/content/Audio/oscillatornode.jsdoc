OscillatorNode : AudioNode

OscillatorNode is an audio source that generates a periodic waveform
such as a sine, triangle, sawtooth, or square wave (specified by the
%%#type|**type**%% property.

Created by %%/AudioContext#createOscillator|**audioContext.createOscillator()**%%.

Spec:
http://www.w3.org/TR/2013/WD-webaudio-20131010/#OscillatorNode

----
instance.type : String

The type of wave generated by **this**.  Can be set to one of
**'sine'**,
**'square'**,
**'sawtooth'**,
or
**'triangle'**.
When using %%#setPeriodicWave|**setPeriodicWave()**%%
to define the waveform, **type** will be set to **'custom'**.

<htmlexample>
<button onclick='playpause()'>play/pause</button><br>
<select id='select' onchange='setType(this.value)'></select>
<script>
  var options = ['sine', 'square', 'sawtooth', 'triangle'];
  var select = document.getElementById('select');
  options.forEach(function(option, i) {
    select.add(new Option(option, option));
  });

  // Temporary workaround until AudioContext is standardized 
  window.AudioContext = window.AudioContext || window.webkitAudioContext;
 
  var context = new AudioContext();
  var oscillator = context.createOscillator();
  oscillator.start(0);
  var connected = false;
  
  var playpause = function() {
    if (!connected) {
      oscillator.connect(context.destination);
    }
    else {
      oscillator.disconnect();
    }
    connected = !connected;
  };

  var setType = function(type) {
    oscillator.type = type;
  };
</script>
</htmlexample>

----
instance.frequency : AudioParam

The frequency of the wave (in Hertz).  The default value is 440. 
This is combined with
%%#detune|**detune**%% to produce the effective frequency using the equation: 
**effectiveFrequency = frequency * pow(2, detune / 1200)**.

<htmlexample>
<button onclick='playpause()'>play/pause</button><br>
<input id='input' value='440'>hz <button onclick='setFrequency()'>set</button>
<script>
  // Temporary workaround until AudioContext is standardized 
  window.AudioContext = window.AudioContext || window.webkitAudioContext;
 
  var context = new AudioContext();
  var oscillator = context.createOscillator();
  oscillator.start(0);
  var connected = false;
  
  var playpause = function() {
    if (!connected) {
      oscillator.connect(context.destination);
    }
    else {
      oscillator.disconnect();
    }
    connected = !connected;
  };

  var setFrequency = function() {
    var input = document.getElementById('input');
    oscillator.frequency.value = +input.value;
  };
</script>
</htmlexample>

ReadOnly:
true

----
instance.detune : AudioParam

A detuning value to alter the effective frequency 
(detune is specified in %%http://en.wikipedia.org/wiki/Cent_(music)|Cents%%).  
The default value is 0. 
This is combined with
%%#frequency|**frequency**%% to produce the effective frequency using the equation: 
**effectiveFrequency = frequency * pow(2, detune / 1200)**.

<htmlexample>
<button onclick='playpause()'>play/pause</button><br>
<input id='input' value='100'>cent <button onclick='setDetune()'>set</button>
<script>
  // Temporary workaround until AudioContext is standardized 
  window.AudioContext = window.AudioContext || window.webkitAudioContext;
 
  var context = new AudioContext();
  var oscillator = context.createOscillator();
  oscillator.start(0);
  var connected = false;
  
  var playpause = function() {
    if (!connected) {
      oscillator.connect(context.destination);
    }
    else {
      oscillator.disconnect();
    }
    connected = !connected;
  };

  var setDetune = function() {
    var input = document.getElementById('input');
    oscillator.detune.value = +input.value;
  };
</script>
</htmlexample>

ReadOnly:
true

----
prototype.start(when : Number) : undefined

----
prototype.stop(when : Number) : undefined

----
prototype.setPeriodicWave(periodicWave : PeriodicWave) : undefined

Sets the shape of the waveform.  

<htmlexample>
<button onclick='playpause()'>play/pause</button><br>
<input id='input' value='100'>cent <button onclick='setDetune()'>set</button>
<script>
  // Temporary work around until AudioContext is standardized 
  window.AudioContext = window.AudioContext || window.webkitAudioContext;
 
  var context = new AudioContext();
  var oscillator = context.createOscillator();
  oscillator.frequency.value = 100;

  var real = [0];
  var imaginary = [0]; 

  for (var i = 0; i < 8; i++) {
    real.push(Math.cos(i));
    imaginary.push(Math.random());
  }

  var periodicWave = context.createPeriodicWave(new Float32Array(real), new Float32Array(imaginary));
  oscillator.setPeriodicWave(periodicWave);

  oscillator.start(0);
  var connected = false;
  
  var playpause = function() {
    if (!connected) {
      oscillator.connect(context.destination);
    }
    else {
      oscillator.disconnect();
    }
    connected = !connected;
  };

  var setDetune = function() {
    var input = document.getElementById('input');
    oscillator.detune.value = +input.value;
  };
</script>
</htmlexample>

----
event.ended : listener(event : Event) : undefined


