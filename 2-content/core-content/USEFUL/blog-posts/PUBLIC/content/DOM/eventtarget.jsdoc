EventTarget : Object

EventTargets are Objects that fire events.  EventTargets usually
expose an <code>on<em>event</em></code> property for each event where you can
assign a %%/Function|Function%% to be called when the event fires.

You can also use %%#addEventListener|**addEventListener()**%% to
hook up multiple listeners to the same event.

Spec:
https://dom.spec.whatwg.org/#interface-eventtarget

----
prototype.addEventListener(type : String, listener(event : Event) : undefined, [useCapture : Boolean]) : undefined

Adds **listener** to the list of callbacks called when the specified
event is fired. If **useCapture** is true, **listener** will be called
in the capture phase of the event routing (ie, during the walk down the tree
to the target instead of on the way up after firing on the target).

Unlike using the <code>on<em>event</em></code> style of listening to
events, **addEventListener** allows more than one listener
to be associated with the event.

Use %%#removeEventListener|**removeEventListener()**%%
to stop listening to the event.

<htmlexample>
<!-- This example demonstrates adding 'click' listeners and capture/bubbling -->
<div id='div'>
  <button id='button'>click</button>
</div>
<script>
var body = document.body;
body.addEventListener('click', function(event) {
  console.log('body capture');
}, true);

var div = document.getElementById('div');
div.addEventListener('click', function(event) {
  console.log('div capture');
}, true);

var button = document.getElementById('button');
button.addEventListener('click', function(event) {
  console.log('button capture');
}, true);

button.addEventListener('click', function(event) {
  console.log('button bubble');
}, false);

div.addEventListener('click', function(event) {
  console.log('div bubble');
}, false);

body.addEventListener('click', function(event) {
  console.log('body bubble');
}, false);
</script>
</htmlexample>

----
prototype.addEventListener( \
  type : String, \
  listener(event : Event) : undefined, \
  options : { \
    capture = false: Boolean /* call listener in the capture phase */, \
    once = false: Boolean /* remove **listener** after firing */, \
    passive = false: Boolean /* set to **true** if you'll never call %%/Event#preventDefault|**event.preventDefault()**%%. Allows browser to provide perf optimizations like smoother scrolling. */ \
  }) : undefined

----
prototype.addEventListener(type : String, listener : EventListener, [useCapture : Boolean]) : undefined

----
prototype.addEventListener( \
  type : String, \
  listener : EventListener, \
  options : { \
    capture = false: Boolean /* call listener in the capture phase */, \
    once = false: Boolean /* remove **listener** after firing */, \
    passive = false: Boolean /* set to **true** if you'll never call %%/Event#preventDefault|**event.preventDefault()**%%. Allows browser to provide perf optimizations like smoother scrolling. */ \
  }) : undefined


----
prototype.removeEventListener(type : String, listener(event : Event) : undefined, [useCapture : Boolean]) : undefined

----
prototype.removeEventListener( \
  type : String, \
  listener(event : Event) : undefined, \
  options : { \
    capture = false: Boolean /* removes the listener hooked to the capture phase */ \
  }) : undefined

----
prototype.removeEventListener(type : String, listener : EventListener, [useCapture : Boolean]) : undefined

----
prototype.removeEventListener( \
  type : String, \
  listener : EventListener, \
  options : { \
    capture = false: Boolean /* removes the listener hooked to the capture phase */ \
  }) : undefined

----
prototype.dispatchEvent(event : Event) : Boolean
