Iterable : Object

An iterable object is any object that returns a function that produces
an %%/Iterator|Iterator%% for its %%/Symbol#iterator|**Symbol.iterator**%%
property.

You can loop over all values in an iterable object by using a 
**for (var value of iterable) { }** loop.

See %%/Iterator|Iterator%% for more details.

Version:
ECMAScript 2015

Spec:
http://www.ecma-international.org/ecma-262/6.0/#sec-iterable-interface

----
instance[Symbol.iterator] : Function<Iterator>

Returns a function that produces an Iterator for this object.

<example>
// Arrays are a built in Iterable object
var arr = ['a', 'b', 'c'];

// Use for (... of ...) loop to get the values of an iterable
for (var x of arr) {
  console.log(x);
} 

// Under the covers, for (... of ...) does the following: 
var iterator = arr[Symbol.iterator]();
var current = iterator.next();
while (!current.done) {
  console.log(current.value);
  current = iterator.next();
}
</example>
