ImageData : Object

Contains the pixel data of a %%/CanvasRenderingContext2D|**CanvasRenderingContext2D**%%.

Can also be created through
%%/CanvasRenderingContext2D#createImageData|**CanvasRenderingContext2D.createImageData()**%%
or
%%/CanvasRenderingContext2D#createImageData|**CanvasRenderingContext2D.getImageData()**%%.

Spec:
https://html.spec.whatwg.org/#imagedata

----
new ImageData(width : Number, height : Number) : ImageData

Creates an ImageData of the specified size filled with transparent black.

<htmlexample>
<canvas id='canvas'></canvas>
<script>
  var canvas = document.getElementById('canvas');
  var context = canvas.getContext('2d');

  var imageData = new ImageData(100, 100);

  for (var i = 0; i < imageData.data.length; i++) {
    imageData.data[i] = Math.round(255 * Math.random());
  }

  context.putImageData(imageData, 0, 0);
</script>

</htmlexample>

----
new ImageData(data : Uint8ClampedArray, width : Number, height : Number) : ImageData

Creates an ImageData of the specified size with the specified data. **data[0]** is
the Red component of the first pixel (top left), **data[1]** is the Green component of the first pixel,
**data[2]** is the Blue component of the first pixel,
**data[3]** is the Alpha component of the first pixel,
**data[4]** is the Red component of the second pixel (one right of top left), etc.

<htmlexample>
<canvas id='canvas'></canvas>
<script>
  var canvas = document.getElementById('canvas');
  var context = canvas.getContext('2d');

  var width = 100;
  var height = 100;

  var data = new Uint8ClampedArray(4 * width * height);

  for (var i = 0; i < data.length; i++) {
    data[i] = Math.round(255 * Math.random());
  }

  var imageData = new ImageData(data, 100, 100);
  context.putImageData(imageData, 0, 0);
</script>
</htmlexample>

----
instance.width : Number

The width of the buffer in pixels.

<htmlexample>
<canvas id='canvas'></canvas>
<script>
  var canvas = document.getElementById('canvas');
  var context = canvas.getContext('2d');

  var imageData = context.createImageData(100, 150);

  console.log(imageData.width);
</script>
</htmlexample>


IDL:
readonly attribute unsigned long width;

ReadOnly:
true

----
instance.height : Number

The height of the buffer in pixels.

<htmlexample>
<canvas id='canvas'></canvas>
<script>
  var canvas = document.getElementById('canvas');
  var context = canvas.getContext('2d');

  var imageData = context.createImageData(100, 150);

  console.log(imageData.height);
</script>
</htmlexample>


IDL:
readonly attribute unsigned long height;

ReadOnly:
true

----
instance.data : Uint8ClampedArray

The pixel color values. The data is stored in RGBA order so
**data[0]** is pixel 0's red channel,
**data[1]** is pixel 0's green channel,
**data[2]** is pixel 0's blue channel,
**data[3]** is pixel 0's alpha channel,
**data[4]** is pixel 1's red channel, etc.

<htmlexample>
<canvas id='canvas'></canvas>
<script>
  var canvas = document.getElementById('canvas');
  var context = canvas.getContext('2d');

  var imageData = context.createImageData(100, 100);

  for (var i = 0; i < imageData.data.length; i++) {
    imageData.data[i] = Math.round(255 * Math.random());
  }

  context.putImageData(imageData, 0, 0);
</script>
</htmlexample>


ReadOnly:
true
